name: Project tests

on:
  push:
    paths-ignore:
      - "docs/**"
    branches:
      - main
      - devel
  pull_request:
    paths-ignore:
      - "docs/**"
    branches:
      - "**"

jobs:
  lint_c_cpp:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Run clang-tidy
        uses: shenxianpeng/cpp-linter-action@master
        id: linter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: file
          tidy-checks: ""
      - name: Fail fast?!
        if: steps.linter.outputs.checks-failed > 0
        run: |
          echo "Some files failed the linting checks!"
          exit 1

  test:
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        os: [Linux]
        python-version: ["3.9"]
        include:
          - os: Linux
            image: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y ${{ matrix.bootstrap-args }}

      - name: Update PATH
        if: ${{ matrix.os != 'Windows' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Path for Windows
        if: ${{ matrix.os == 'Windows' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Flake8 Annotator
        uses: rbialon/flake8-annotations@v1

      - name: Run flake8 linter
        run: |
          poetry run flake8 openforbc_benchmark tests

      - name: Run mypy type checker
        run: poetry run mypy

      - name: Install pytest plugin
        run: poetry run pip install pytest-github-actions-annotate-failures

      - name: Run pytest
        run: poetry run python -m pytest -q tests/
